from tkinter import *
import datetime
import pymysql

# need to install this module in computer, let me know if you need help installing it - Zu
# http://www.cc.gatech.edu/classes/AY2014/cs2316_fall/presentations/pymysql3-Mac-instrutions.pdf <- TO INSTALL PYMYSQL

# yall gotta set up VPN to access the database from home

# Label, Entry, Button, OptionMenu are just widgets for the GUIs
# idk why you have to use self.(variable name) in these functions, it's just how I learned it in CS2316
# also not sure why I'm using class, but thats what I learned in 2316 and that seems to be what everyone uses in python

class FancyHotels:
    def __init__(self, win):
        self.Login(win) # pulls up the login window

    def Login(self, win):
        try:
            self.root.deiconify()   # redraws login screen after creating account
                                    # or trying to login again
        except:
            pass
            
        self.root = win
        self.root.title("Login")
        
        Label(self.root, text="Username").grid(row=1, column=0)
        self.e1 = StringVar() # needed so that whatever goes into textbox can be retrieved
        #self.e1.set("Czislam")
        Entry(self.root, textvariable=self.e1).grid(row=1, column=1, columnspan=3)
        
        Label(self.root, text="Password").grid(row=2, column=0)
        self.e2 = StringVar()
        #self.e2.set("blahblah")
        Entry(self.root, textvariable=self.e2).grid(row=2, column=1, columnspan=3)
        
        Button(self.root, text="Login", command=self.CheckLogin).grid(row=3,columnspan=4)
        Label(self.root, text=" ").grid(row=4, column=0, rowspan=2) #space filler
        Button(self.root, text="Create New User Account", command=self.CreateAccount).grid(row=7, columnspan=4)

    def Connect(self): # connects to database network
        
        try: # need to check this
            self.db=pymysql.connect(host="academic-mysql.cc.gatech.edu", db="cs4400_Group_16", user="cs4400_Group_16", passwd="cq35Y7W9")
            # print("DB connected")
            return self.db
            
        except: # bad internet connection, the login should be correct though
            messagebox.showinfo("Error!", "Check your internet connection")
            # print("DB not connected")

    def CheckLogin(self):

        # print("function: CheckLogin")

        self.Connect() # connects to database
        
        self.username = self.e1.get() # retrieves username from GUI
        self.password = self.e2.get() # retrieves password from GUI

        # print("\tusername:", self.username, "password:", self.password)

        if self.username[0] == "C": # if user is a customer
            cursor = self.db.cursor()
            sql = "SELECT C_Username, Password FROM CUSTOMER WHERE (C_Username='{}' AND Password='{}')".format(self.username, self.password)
            cursor.execute(sql)

            for record in cursor:
                #print("\titems in cursor:", cursor.rowcount)
                
                if cursor.rowcount != 0: # successful customer login
                    self.UserView()

                else:
                    messagebox.showinfo("Login Error!", message="Incorret login. Try again")
                   
        elif self.username[0] == "M": # if user is a manager
            cursor = self.db.cursor()
            sql = "SELECT M_Username, Password FROM MANAGERS WHERE (M_Username='{}' AND Password='{}')".format(self.username, self.password)
            cursor.execute(sql)

            for record in cursor:
                # print("\titems in cursor:", cursor.rowcount)
                
                if cursor.rowcount != 0: # success manager login
                    self.MgrView()

                else:
                    messagebox.showinfo("Login Error!", message="Incorret login. Try again")
            
        
        else: # username doesnt exist
            messagebox.showinfo("Login Error!", message="Invalid username Try again!")
            
  
    def UserView(self): # connect to database and check username/pw

        # print("function: UserView")

        self.root.withdraw() # closes the login window
        
        self.userview = Tk()
        self.userview.title("Choose Functionality")
        
        Label(self.userview, text="Welcome {}".format(self.e1.get())).grid(row=0,sticky=W)
        Label(self.userview, text=" ").grid(row=1)
        
        Button(self.userview, text="Make a New Reservation", command=self.RoomSearch).grid(row=2)
        Button(self.userview, text="Update Your Reservation", command=self.updateReservation).grid(row=3)
        Button(self.userview, text="Cancel a Reservation", command=self.cancelReservation).grid(row=4)
        Button(self.userview, text="Provide feedback",command=self.giveReview).grid(row=5)
        Button(self.userview, text="View feedback",command=self.viewReview).grid(row=6)

    def RoomSearch(self):
        #print("function: RoomSearch")
        
        self.userview.withdraw() # closes the user option's window
        
        self.rmsrch = Toplevel()
        self.rmsrch.title("Search Rooms")
        
        # https://www.reddit.com/r/learnpython/comments/2wn1w6/how_to_create_a_drop_down_list_using_tkinter/
        self.cities = ["Atlanta", "Charlotte", "Savannah", "Orlando", "Miami"]
            
        # we have to use lists again when customer needs to delete credit card

        self.o1 = StringVar(self.rmsrch) # needed to create the dropdown menu
        self.o1.set(self.cities[0]) # first item auto selected in dropdown

        Label(self.rmsrch, text="Location").grid(row=0, column=0, sticky=W)
        self.option = OptionMenu(self.rmsrch, self.o1, *self.cities) # *self.cities adds the list to the drop down
        self.option.grid(row=0, column=1)

        Label(self.rmsrch, text="Start Date").grid(row=1, column=0)
        self.Sdate = StringVar()

        self.Sdate.set('Dec 2 2016')
        self.startDate = Entry(self.rmsrch, textvariable=self.Sdate)
        self.startDate.grid(row=1, column=1)

        Label(self.rmsrch, text="End Date").grid(row=1, column=2)
        self.Edate = StringVar()
        self.Edate.set("Dec 4 2016") # just to make shit easy for now
        end = Entry(self.rmsrch, textvariable = self.Edate).grid(row=1, column=3)

        Label(self.rmsrch, text="Dates Must Be Entered as: MMM D YYYY when Day < 10").grid(row=2, column =0, columnspan=4)
        Label(self.rmsrch, text="Dates Must Be Entered as: MMM DD YYYY when Day >= 10").grid(row=3, column =0, columnspan=4)

        self.searchbutton = Button(self.rmsrch, text="Search",
               command=self.reserveRoom)
        self.searchbutton.grid(row=4, column=0, columnspan=4)

    def chkbox_checked(self):
        for ix, item in enumerate(self.cb):
            # print(self.cb_v[ix].get())
            self.select[ix] = (self.cb_v[ix].get())
            # self.searchbutton.config(state=NORMAL)
        # print("self.select", self.select)

    def reserveRoom(self):
        
        if len(self.Sdate.get()) == 0 or len(self.Edate.get()) == 0: # empty fields
            print("missing date")
            messagebox.showinfo("Search Error!", message="make sure dates are filled")
            return
        
        else: # fields entered

            self.startdate1 = self.Sdate.get() # string
            print("self.startdate1 as string:", self.startdate1)
            self.startdate1 = datetime.datetime.strptime(self.startdate1, '%b %d %Y').date()
            # converts to datetime.date as in sql
            print("self.startdate1", self.startdate1, type(self.startdate1))


            self.enddate1 = self.Edate.get()
            print("self.enddate1 as string:", self.enddate1)
            self.enddate1 = datetime.datetime.strptime(self.enddate1, '%b %d %Y').date()
            print("self.enddate1", self.enddate1)

            self.today1 = datetime.datetime.now().date()
            print("self.today1", self.today1)
            
            
            if self.startdate1 < self.today1 or self.enddate1 < self.today1: # no past dates
                print("past date date")
                messagebox.showinfo("Search Error!", message="cannot select dates in the past")
                return
            elif self.enddate1 < self.startdate1: # cant end before starting
                print("end date before start date")
                messagebox.showinfo("Search Error!", message="make sure end date is not on or before start date")
                return
            else: # valid entries
                print("all good")
            

        # print("function: reserveRoom")
        # print("\tStart Date:", self.Sdate.get(), type(self.Sdate.get()))
        # print("\tEnd Date:", self.Edate.get(), type(self.Edate.get()))


        self.rmsrch.withdraw()
        self.reserve = Toplevel()
        self.reserve.title("Make a Reservation")

        self.reserveCity = self.o1.get() # this is the city cust. selects

        #print("\tChosen City:", self.reserveCity)
        
        self.cursor1 = self.db.cursor() # places cursor in database

        #### NEED TO FILTER THIS SQL STATEMENT DOWN BY DATES
        # gets all available rooms based on search query

        ## ALL AVAILABLE ROOMS IN TIME FRAME AT LOCATION
        sql = "SELECT RoomNo, Location, Category, Capacity, Cost, ExtraCost FROM ROOMS WHERE Location = '{}' AND ROOMS.RoomNo NOT in ( SELECT RoomNo FROM RESERVED_ROOMS WHERE RESERVED_ROOMS.ResID in (SELECT ResID FROM RESERVATIONS WHERE (StartDate <= '{}' AND EndDate >= '{}') OR (StartDate <= '{}' AND EndDate >= '{}')) AND Location = '{}')".format(self.reserveCity, str(self.startdate1), str(self.enddate1), str(self.startdate1), str(self.enddate1), self.reserveCity)
        # print("correct sql", sql)
        
        # sql = "SELECT RoomNo, Category, Capacity, Cost, ExtraCost FROM ROOMS WHERE Location = '{}'".format(self.reserveCity)
        self.cursor1.execute(sql)
        self.availablerooms = self.cursor1.fetchall() # tuple of tuples of avaialble room info
        # print("\tself.availablerooms", self.availablerooms)

        self.RoomNumber = []
        self.RoomCategory = []
        self.RoomCapacity = []
        self.RoomCostDay = []
        self.RoomExtraCost = []
        # self.RoomChecks = []

        for room in self.availablerooms: # iterates through tuple
            self.RoomNumber.append(str(room[0])) # adds room number for each available room
            self.RoomCategory.append(room[1]) # adds category for each available room
            self.RoomCapacity.append(room[2]) # ^^ capactiy
            self.RoomCostDay.append(room[3]) # ^^ daily cost
            self.RoomExtraCost.append(room[4]) # ^^ extra bed cost

        # print("self.roomNumber", self.RoomNumber)

        if len(self.RoomNumber) == 0: 
            print("nothing available")
            return
        else:
            Label(self.reserve, text="Room Number").grid(row=0, column=0)
            Label(self.reserve, text="Room Category").grid(row=0, column=1)
            Label(self.reserve, text="# Persons Allowed").grid(row=0, column=2)
            Label(self.reserve, text="Cost per Day").grid(row=0, column=3)
            Label(self.reserve, text="Cost of Extra Bed Per Day").grid(row=0, column=4)
            Label(self.reserve, text="Select Room").grid(row=0, column=5)

        self.counter = 1 # keep the row numbers from overlapping through iteration
        j = 0 # specifc room index
        for room in self.RoomNumber: # iterates through all room numbes to create the GUI showing available rooms
            # Room Numbers
            Label(self.reserve, text=str(room)).grid(row=self.counter, column=0)

            # Category
            Label(self.reserve, text=self.RoomCategory[j]).grid(row=self.counter, column=1)

            # Capacity
            Label(self.reserve, text=self.RoomCapacity[j]).grid(row=self.counter, column=2)

            # Cost Per Day
            Label(self.reserve, text=self.RoomCostDay[j]).grid(row=self.counter, column=3)

            # Cost of Extra Bed
            Label(self.reserve, text=self.RoomExtraCost[j]).grid(row=self.counter, column=4)
    
            self.counter += 1
            j += 1

        print("self.roomNumber", self.RoomNumber)
        
        self.cb = [] # list of all checkboxes
        self.cb_v = [] # list of all checkbox values 
        self.select = [] # list of all checkbox values after anything is checked/unchecked
        for ix, text in enumerate(self.RoomNumber):
            self.cb_v.append(StringVar())
            on_value = 1
            off_value = 0
            self.cb.append(Checkbutton(self.reserve, text=text, onvalue=on_value,
                                  offvalue=off_value, variable=self.cb_v[ix],
                                  command=self.chkbox_checked))
            self.cb[ix].grid(row=ix+1, column = 5)
            self.select.append(off_value)
            # print(self.select, "in enumarte")
            self.cb[-1].deselect()
               
        self.b1 = Button(self.reserve, text="Check Details", command=self.checkDetails)
        self.b1.grid(row=self.counter, column=5)


    def extrabed_checked(self):
        for ix, item in enumerate(self.eb):
            # print(self.cb_v[ix].get())
            self.extraBeds[ix] = (self.eb_v[ix].get())
            # self.searchbutton.config(state=NORMAL)
        print("self.extraBeds", self.extraBeds)

        self.chooseCard()

   
    def checkDetails(self):

        self.b1.config(state=DISABLED)

        self.selectedRooms = [] # list of selected room numbers 
        print("self.select", self.select)
        a = 0

            
        for x in self.select:
            # print("x:", x)
            if x == "1":
                # print("true")
                # print(self.RoomNumber[a])
                self.selectedRooms.append(self.RoomNumber[a]) # adds room number if selected
            else:
                # messagebox.showinfo("Search Error!", message="please select a room")
                pass 
            a += 1
            
        if len(self.selectedRooms) == 0:
            print("no rooms selected!")
            messagebox.showinfo("Search Error!", message="please select a room")
            return
        else:
            pass

        self.cursor1 = self.db.cursor()
        print("self.selectedRooms:", self.selectedRooms)

        if len(self.selectedRooms) > 1:
            self.selectedRoomstuple = tuple(self.selectedRooms)
            sql = "SELECT RoomNo, Category, Capacity, Cost, ExtraCost FROM ROOMS WHERE Location = '{}' AND RoomNo IN {}".format(self.o1.get(), self.selectedRoomstuple)
            # print(sql)
        else:
            sql = "SELECT RoomNo, Category, Capacity, Cost, ExtraCost FROM ROOMS WHERE Location = '{}' AND RoomNo = '{}'".format(self.o1.get(), self.selectedRooms[0])
            # print(sql)
            
        self.cursor1.execute(sql) # gets info for all the rooms that were checked by user
        self.checkedrooms = self.cursor1.fetchall() # list of tuples of all room info for selected room
        print("self.checkedrooms", self.checkedrooms)
         
        ### HERE IS WHERE THE USER SELECTS AN EXTRA BRED 

        self.counter += 1
        
        Label(self.reserve, text="Room Number").grid(row=self.counter, column=0)
        Label(self.reserve, text="Room Category").grid(row=self.counter, column=1)
        Label(self.reserve, text="# Persons Allowed").grid(row=self.counter, column=2)
        Label(self.reserve, text="Cost per Day").grid(row=self.counter, column=3)
        Label(self.reserve, text="Cost of Extra Bed Per Day").grid(row=self.counter, column=4)
        Label(self.reserve, text="Extra Bed").grid(row=self.counter, column=5)

        self.bedchecks = [] # extra bed was checked

        self.BedNumber = []
        self.BedCategory = []
        self.BedCapacity = []
        self.BedCostDay = []
        self.BedExtraCost = []
        
        for bed in self.checkedrooms: # selected rooms
            self.BedNumber.append(str(bed[0])) # adds room number for each available room
            self.BedCategory.append(bed[1]) # adds category for each available room
            self.BedCapacity.append(bed[2]) # ^^ capactiy
            self.BedCostDay.append(bed[3]) # ^^ daily cost
            self.BedExtraCost.append(bed[4]) # ^^ extra bed cost
            

        self.eb = []
        self.eb_v = []
        self.extraBeds = []
        # print("selected bed numbers:", self.BedNumber)
        # print("selected bed numbers:", enumerate(self.BedNumber))
        for ix, text in enumerate(self.BedNumber):
            # print("ix", ix)
            # print("self.BedNumber", self.BedNumber[ix])
            self.eb_v.append(StringVar())
            on_value = 1
            off_value = 0
            self.eb.append(Checkbutton(self.reserve, text="Yes", onvalue=on_value,
                                  offvalue=off_value, variable=self.eb_v[ix],
                                  command=self.extrabed_checked))
            self.eb[ix].grid(row=self.counter+ix+1, column = 5)
            self.extraBeds.append(off_value)
            # print(self.select, "in enumarte")
            self.eb[-1].deselect()
            # self.counter += 1

        self.counter += 1
        for x in range(len(self.checkedrooms)):
            Label(self.reserve, text=self.checkedrooms[x][0]).grid(row=self.counter, column=0) # number
            Label(self.reserve, text=self.checkedrooms[x][1]).grid(row=self.counter, column=1) # category
            Label(self.reserve, text=self.checkedrooms[x][2]).grid(row=self.counter, column=2) # capacity
            Label(self.reserve, text=self.checkedrooms[x][3]).grid(row=self.counter, column=3) # daily cost
            Label(self.reserve, text=self.checkedrooms[x][4]).grid(row=self.counter, column=4) # cost extra

            # self.var = IntVar()
            # self.extrabed = Checkbutton(self.reserve, variable=self.var)
            # self.extrabed.grid(row=self.counter, column = 5)
            
            # self.availablerooms[x] += (self.var,)
            self.counter += 1
        # Button(self.reserve, text="Calculate Cost", command = self.chooseCard).grid(row=self.counter, column=5)
        

    def chooseCard(self):

        self.totalprice = 0
        datediff = (self.enddate1 - self.startdate1).days # number of days for reservation
        print("datediff", datediff)

        for i in range(len(self.checkedrooms)):
            print("i, room:", i, self.checkedrooms[i])
            #print("self.checkedrooms[i][3]", self.checkedrooms[i][3])
            #print("self.checkedrooms[i][4]", self.checkedrooms[i][4])
            #print("self.extraBeds[i]", self.extraBeds[i])
            self.totalprice  += (datediff * (self.checkedrooms[i][3]) + (self.checkedrooms[i][4]) * (int(self.extraBeds[i])))
            # print("\tself.totalprice", self.totalprice)

        Label(self.reserve, text="Start Date").grid(row = self.counter, column = 0)
        Label(self.reserve, text="End Date").grid(row= self.counter + 1, column =0)
        Label(self.reserve, text="Total Cost").grid(row = self.counter + 2, column =0)
        Label(self.reserve, text="Use Card").grid(row =  self.counter +3 , column =0)

        self.tcost = StringVar()

        #print("self.Sdate:", self.Sdate.get())
        #print("self.Edate:", self.Edate.get())
        # self.totalCost = 100 ### NEED ACTUAL COST EQUATION

        self.re1 = Entry(self.reserve)
        self.re1.grid(row = self.counter, column = 1)
        self.re2 = Entry(self.reserve)
        self.re2.grid(row= self.counter + 1, column =1)
        self.re3 = Entry(self.reserve, textvariable = self.tcost)
        self.re3.grid(row = self.counter + 2, column =1)
    
        self.re1.insert(0, str(self.Sdate.get()))
        self.re2.insert(0, str(self.Edate.get()))
        self.re3.insert(0, "$"+str(self.totalprice))

        sql = "SELECT CardNum FROM PAYMENT_INFORMATION WHERE C_Username = '{}'".format(self.username)
        self.cursor1.execute(sql)
        self.creditcards = self.cursor1.fetchall()

        #print("credit cards", self.creditcards)

        
        self.usercards = []
        for x in range(len(self.creditcards)):
            # print(self.creditcards[x][0])
            self.usercards.append(self.creditcards[x][0])

        #print(self.usercards)

        self.o2 = StringVar(self.reserve)
        self.o2.set(self.usercards[0])

        self.paycard = OptionMenu(self.reserve, self.o2, *self.usercards).grid(row=self.counter+3, column = 1) # *self.cities adds the list to the drop down

        Button(self.reserve, text="Add New or Delete Existing Card", command=self.addNewCard).grid(row=self.counter+3, column=2)

        Button(self.reserve, text="Submit and Make Reservation!", command=self.confirmation).grid(row=self.counter+4, column=5)

    def addNewCard(self):


        # self.reserve.withdraw()

        self.pay=Toplevel()
        self.pay.title("Payment Information")

        self.ecard1 = StringVar()
        self.ecard2 = StringVar()
        self.ecard3 = StringVar()
        self.ecard4 = StringVar()

        Label(self.pay, text="Add Card").grid(row=0, columnspan = 2)

        Label(self.pay, text="Name on Card").grid(row=1, column = 0)
        Entry(self.pay, textvariable = self.ecard1).grid(row=1, column=1)

        Label(self.pay, text="Card Number").grid(row=2, column = 0)
        Entry(self.pay, textvariable = self.ecard2).grid(row=2, column=1)

        Label(self.pay, text="Expiration Date").grid(row=3, column = 0)
        Entry(self.pay, textvariable = self.ecard3).grid(row=3, column=1)

        Label(self.pay, text="CVV").grid(row=4, column = 0)
        Entry(self.pay, textvariable =self.ecard4).grid(row=4, column=1)

        Button(self.pay, text= "Save", command=self.saveCard).grid(row=6, columnspan=2)

    
        Label(self.pay, text = "Delete Card").grid(row=7, column = 0)

        
        print(len(self.usercards))
        if len(self.usercards) != 0:
            self.o3 = StringVar(self.pay)
            self.o3.set(self.usercards[0])
            self.paycard = OptionMenu(self.pay, self.o3, *self.usercards).grid(row=7, column = 1) # *self.cities adds the list to the drop down
            Button(self.pay, text="Delete", command=self.deleteCard).grid(row=8, column=0, columnspan=2)
            
        else:
            Label(self.pay, text="No cards in system").grid(row=7, coloumn=1)
       
    def saveCard(self):

        self.nameoncard = self.ecard1.get()
        self.cardnumber = self.ecard2.get()
        self.expiration = self.ecard3.get()
        self.cvv = self.ecard4.get()

        print(self.nameoncard, self.cardnumber, self.expiration, self.cvv)

        # INSERT INTO Payment_Information(`NameOnCard`, `CardNum`,  `ExpDate`, `CVV`, `C_Username`) VALUES (’[NameOnCard]’, '[CardNum]', '[ExpDate]',  '[CVV]', '[C_Username]')
        sql = "INSERT INTO PAYMENT_INFORMATION VALUES (NameOnCard='{}', CardNum='{}', ExpDate='{}', CVV='{}', C_Username='{}')".format(self.nameoncard, self.cardnumber, self.expiration, self.cvv, self.username)
        print(sql)
        self.cursor1.execute(sql)
        self.db.commit()

        messagebox.showinfo("card saved", message="saved!") # lets customer know card has been saved
        # self.pay.destroy() # then destroys the window

    def deleteCard(self):

        self.c = self.db.cursor()
        
        # DELETE FROM Payment_Information WHERE `CardNum` = ‘[CardNum]’
        sql = "DELETE FROM PAYMENT_INFORMATION WHERE CardNum='{}'".format(self.o3.get())
        self.c.execute(sql)
        self.db.commit()
        
        messagebox.showinfo("card deleted", message="deleted!") # lets customer know card deleted
        self.pay.destroy() # then destroys window

    def confirmation(self): # need to finish code to include way to get reservation ID

        self.chooseCard()
        
        print("total cost of reservation", self.totalprice)
        
        self.paidwithcard = self.o2.get()
        print(self.paidwithcard)

        self.reserve.withdraw()
        
        self.conf = Tk()
        self.conf.title("Confirmation Screen")

        sql = "SELECT MAX(ResID) FROM RESERVATIONS;"
        self.cursor1.execute(sql)

        self.oldmax = self.cursor1.fetchone()
        print(self.oldmax[0], type(self.oldmax[0]))

        self.newmax = self.oldmax[0] + 10
        print("new reservation ID self.newmax", self.newmax)

        startdatetime = self.Sdate.get()
        self.startdatetime = datetime.datetime.strptime(startdatetime, '%b %d %Y')
        self.sqlstarttime = self.startdatetime.strftime('%Y-%m-%d')

        enddatetime = self.Edate.get()
        self.enddatetime = datetime.datetime.strptime(enddatetime, '%b %d %Y')
        self.sqlendtime = self.enddatetime.strftime('%Y-%m-%d')

        # self.sqlstart = self.response1[1].strftime('%Y-%m-%d') ## converts to YYYY-MM-DD
        # self.sqlend = self.response1[2].strftime('%Y-%m-%d') ## converts to YYYY-MM-DD

        sql = "INSERT INTO RESERVATIONS VALUES ( ResID = '{}', C_Username='{}', StartDate='{}', EndDate='{}', FinalCost='{}', CardNum='{}', '0' )".format(self.newmax, self.username, self.sqlstarttime,  self.sqlendtime, self.totalprice, self.paidwithcard)
        print(sql)

        self.cursor1.execute(sql)
        self.db.commit()

        Label(self.conf, text="Your Reservation ID").grid(row=1, column=0)
        Label(self.conf, text=str(self.newmax)).grid(row=1,column=1)
        # self.RID = StringVar()
        # self.ce = Entry(self.conf, textvariable = self.RID)
        # self.ce.grid(row=1, column=1)
        Label(self.conf, text="Please save this reservation ID for all further communication").grid(row=2, column=0,columnspan=2)

        # self.ce.insert(0, str(self.newmax))

        Button(self.conf, text="Okay", command=self.FinishedBooking).grid(row=3, column=0, columnspan=2)

    def FinishedBooking(self):
        
        self.conf.destroy()
        self.UserView()
        
    def MgrView(self): # connect to database and check mgr username/pw

        self.root.withdraw() # closes the login window
        
        self.mgrview = Tk()
        self.mgrview.title("Choose Functionality")

        Label(self.mgrview, text="Welcome {}".format(self.e1.get())).grid(row=0,sticky=W)
        Label(self.mgrview, text=" ").grid(row=1)
        
        Button(self.mgrview, text="View Reservation Reports", command = self.ReservationReports).grid(row=2)
        Button(self.mgrview, text="View Popular Room Category Reports", command = self.PopularRooms).grid(row=3)
        Button(self.mgrview, text="View Revenue Reports", command = self.RevenueReports).grid(row=4)

    def ReservationReports(self):
        pass
        self.c = self.db.cursor()

        sql = "SELECT MONTHNAME(StartDate), Location, COUNT(ResID) FROM (RESERVATIONS NATURAL JOIN RESERVED_ROOMS) WHERE ((StartDate BETWEEN '2015-08-01' AND '2015-08-31') AND (EndDate BETWEEN '2015-08-01' AND '2015-08-31')) OR ((StartDate BETWEEN '2015-09-01' AND '2015-09-30') AND (EndDate BETWEEN '2015-09-01' AND '2015-09-30')) AND Location=Location GROUP BY MONTHNAME(StartDate), Location"
        
          

        self.c.execute(sql)

        self.responses = self.c.fetchall()

        self.root.withdraw()

        self.ReservationReports = Tk()
        self.ReservationReports.title("Reservation Report")

        Label(self.ReservationReports, text="Month").grid(row=0, column=1)
        Label(self.ReservationReports, text="Location").grid(row=0, column=2)
        Label(self.ReservationReports, text="Total Number of Reservations").grid(row=0, column=3)
        

        counter = 1
        for response in self.responses:
            Label(self.ReservationReports, text= response[0]).grid(row = counter, column = 1)
            Label(self.ReservationReports, text= response [1]).grid(row = counter, column = 2)
            Label(self.ReservationReports, text= response [2]).grid(row = counter, column = 3)


            counter += 1

    def PopularRooms(self):
        pass

        sql = "SELECT Location, RoomNo FROM RESERVED_ROOMS WHERE "
        # a count must be done on category I'm guessing --- how many are we considering popular for a category?

    def RevenueReports(self):
        pass
        self.purp = self.db.cursor()

        sql = "SELECT MONTHNAME(StartDate), Location, SUM(FinalCost) AS 'Total Revenue' FROM (RESERVATIONS NATURAL JOIN RESERVED_ROOMS) WHERE ((StartDate BETWEEN '2015-08-01' AND '2015-08-31') AND (EndDate BETWEEN '2015-08-01' AND '2015-08-31')) OR ((StartDate BETWEEN '2015-09-01' AND '2015-09-30') AND (EndDate BETWEEN '2015-09-01' AND '2015-09-30')) AND Location=Location GROUP BY MONTHNAME(StartDate), Location" 


        
          #.format(self.o1.get()) idk this part for the end of the statement!

        self.purp.execute(sql)

        self.revresponses = self.purp.fetchall()
        print(self.revresponses)

        self.root.withdraw()

        self.RevenueReports = Tk()
        self.RevenueReports.title("Revenue Report")

        Label(self.RevenueReports, text="Month").grid(row=0, column=1)
        Label(self.RevenueReports, text="Location").grid(row=0, column=2)
        Label(self.RevenueReports, text="Total Revenue").grid(row=0, column=3)
        

        counter = 1
        for revresponse in self.revresponses:
            Label(self.RevenueReports, text= revresponse[0]).grid(row = counter, column = 1)
            Label(self.RevenueReports, text= revresponse[1]).grid(row = counter, column = 2)
            Label(self.RevenueReports, text= revresponse[2]).grid(row = counter, column = 3)


            counter += 1

        
    def CreateAccount(self): # pulls up when user wants to create new account

        self.Connect()

        self.root.withdraw() # closes the login window
        
        self.createacct = Toplevel()
        self.createacct.title("New User Registration")

        self.n1 = StringVar()
        self.n2 = StringVar()
        self.n3 = StringVar()
        self.n4 = StringVar()

        Label(self.createacct, text="Username").grid(row=2, sticky=E)
        Entry(self.createacct, textvariable = self.n1).grid(row=2, column=1)

        Label(self.createacct, text="Password").grid(row=3, sticky=E)
        Entry(self.createacct, textvariable = self.n2).grid(row=3, column=1)

        Label(self.createacct, text="Confirm Password").grid(row=4, sticky=E)
        Entry(self.createacct, textvariable = self.n3).grid(row=4, column=1)

        Label(self.createacct, text="Email").grid(row=5, sticky=E)
        Entry(self.createacct, textvariable = self.n4).grid(row=5, column=1)

        Button(self.createacct, text="Submit", command=self.InsertNewAccount).grid(row=8, columnspan=2)

    def InsertNewAccount(self): # goes from New User Registration to Login window

        self.newuser = self.n1.get()
        self.pw1 = self.n2.get()
        self.pw2 = self.n3.get()
        self.newemail = self.n4.get()

        print(self.newuser, self.pw1, self.pw2, self.newemail)

        if len(self.newuser)!=0 and len(self.pw1) !=0 and len(self.pw2) != 0 and len(self.newemail) != 0:
            if self.pw1 == self.pw2:

                self.c = self.db.cursor()
                sql = "SELECT C_Username FROM CUSTOMER WHERE C_Username = '{}'".format(self.newuser)
                print(sql)
                self.c.execute(sql)

                print(self.c.rowcount)
                if self.c.rowcount == 0:
                    
                    sql = "INSERT INTO CUSTOMER VALUES ('{}', '{}', '{}')".format(self.newuser, self.pw1, self.newemail)
                    print(sql)
                    self.c.execute(sql)
                    self.db.commit()
                    
                    messagebox.showinfo("Account Created!", message="created account. proceed to login")
                    self.createacct.destroy()
                    self.root.deiconify()

                else:
                    messagebox.showinfo("registration error", message="username not available. try again")
                
            else:
                messagebox.showinfo("registration error", message="passwords don't match")   

        else:
            messagebox.showinfo("Registration Error!", message="Please enter all fields!")


    def viewReview(self):

        self.root.withdraw()

        self.viewReview = Toplevel()
        self.viewReview.title("View Review")

        self.cities = ["Atlanta", "Charlotte", "Savannah", "Orlando", "Miami"]

        self.opt = StringVar(self.viewReview)
        self.opt.set(self.cities[0])

        Label(self.viewReview, text="Hotel Location").grid(row=3, column=0)
        self.opts = OptionMenu(self.viewReview, self.opt, *self.cities) # *self.cities adds the list to the drop down
        self.opts.grid(row=3, column=1, sticky=EW)

        Button(self.viewReview, text="Check Reviews", command=self.viewReviews).grid(row=3, column=2)

    def viewReviews(self):

        print("view reviews for:", self.opt.get())

        self.c = self.db.cursor()

        sql="SELECT Rating, Comment FROM HOTEL_REVIEWS WHERE Location = '{}'".format(self.opt.get())

        self.c.execute(sql)

        self.reviews = self.c.fetchall()
        # print(self.reviews)

        counter = 5
        for review in self.reviews:
            Label(self.viewReview, text=review[0]).grid(row=counter, column=0)
            Label(self.viewReview, text=review[1]).grid(row=counter, column=1)
            counter += 1


    def giveReview(self):

        self.root.withdraw()
        self.userview.withdraw()

        self.giveReview = Toplevel()
        self.giveReview.title("Give Review")

        self.cities = ["Atlanta", "Charlotte", "Savannah", "Orlando", "Miami"]

        self.choices = StringVar(self.giveReview)
        self.choices.set(self.cities[0])

        Label(self.giveReview, text="Hotel Location").grid(row=2, column=1)
        self.choice = OptionMenu(self.giveReview, self.choices, *self.cities) # *self.cities adds the list to the drop down
        self.choice.grid(row=2, column=2, sticky=EW)


        self.ratings = ["Excellent", "Good", "Bad", "Very Bad", "Neutral"]

        self.values = StringVar(self.giveReview)
        self.values.set(self.ratings[0])

        Label(self.giveReview, text="Rating").grid(row=3, column=1)
        self.value = OptionMenu(self.giveReview, self.values, *self.ratings) # *self.cities adds the list to the drop down
        self.value.grid(row=3, column=2, sticky=EW)

        Label(self.giveReview, text="Comment").grid(row=4, column=1)
        self.c1 = StringVar()
        self.comment = Entry(self.giveReview, textvariable =  self.c1)
        self.comment.grid(row=4, column = 2)
        
        Button(self.giveReview, text="Submit", command=self.submitReview).grid(row=5, column= 0, columnspan=3)

    def submitReview(self):

        self.comment = self.c1.get()
        print(self.choices.get(), self.values.get(), self.comment)

        self.c = self.db.cursor()
        sql = "SELECT MAX(ReviewID) FROM HOTEL_REVIEWS"
        self.c.execute(sql)
        lastreviewID = self.c.fetchone()[0]

        self.reviewID = lastreviewID + 1
        print(lastreviewID)

        sql = "INSERT INTO HOTEL_REVIEWS VALUES('{}', '{}', '{}', '{}', '{}')".format(self.choices.get(), self.reviewID, self.values.get(), self.username, self.comment)
        print(sql)
        self.db.commit()

        self.c.execute(sql)

        messagebox.showinfo("Review Submitted", message="Thank you for your comment!") # lets customer know card has been saved
        self.giveReview.withdraw()
        self.userview.deiconify()

    def updateReservation(self):

        self.userview.withdraw()

        self.updateReservations = Toplevel()
        self.updateReservations.title("Update Reservation")

        Label(self.updateReservations, text="Reservation ID").grid(row=1, column=1)
        self.r1 = StringVar()
        self.ID = Entry(self.updateReservations, textvariable =  self.r1)
        self.ID.grid(row=1, column = 2, columnspan=2)

        self.Rsearch =Button(self.updateReservations, text="Search", command=self.searchReservation)
        self.Rsearch.grid(row=1, column= 4)
        Button(self.updateReservations, text="Back", command=self.ReservationsToUserMenu).grid(row=1, column =5)

    def ReservationsToUserMenu(self):
        self.updateReservations.destroy()
        self.userview.deiconify()

    def searchReservation(self):
        
        self.c = self.db.cursor()
        sql = "SELECT ResID, StartDate, EndDate, C_Username FROM RESERVATIONS WHERE ResID = '{}' and C_Username = '{}'".format(self.r1.get(), self.username)
        print(sql)
        self.c.execute(sql)
        self.response1 = self.c.fetchone()
        print("self.response1 type:", type(self.response1))
        #print("self.response1.rowcount", self.response1.rowcount)

        if self.response1 != None:
            print("reservation ID found")

            self.Rsearch.config(state=DISABLED)
            
            self.reservationID = self.response1[0]
            self.Rstartdate = self.response1[1].strftime('%b %d %Y') # string of old start date
            self.Renddate = self.response1[2].strftime('%b %d %Y') # string of old end date

            print(self.response1)
            print(self.Rstartdate, self.Renddate)

            Label(self.updateReservations, text="Current Start Date").grid(row=2, column=1)
            self.cS = StringVar()
            self.cS.set(self.Rstartdate)
            self.date = Entry(self.updateReservations, textvariable =  self.cS)
            self.date.grid(row=2, column = 2)

            Label(self.updateReservations, text="Current End Date").grid(row=2, column=3)
            self.cE = StringVar()
            self.cE.set(self.Renddate)
            self.eDate = Entry(self.updateReservations, textvariable =  self.cE)
            self.eDate.grid(row=2, column = 4)

            # now = datetime.datetime.now()
            # self.today = "{}-{}-{}".format(now.year, now.month, now.day)

            Label(self.updateReservations, text="New Start Date").grid(row=3, column=1)
            self.nS = StringVar()
            # self.nS.set(self.today)
            self.nStart = Entry(self.updateReservations, textvariable =  self.nS)
            self.nStart.grid(row=3, column = 2)

            Label(self.updateReservations, text="New End Date").grid(row=3, column=3)
            self.nE = StringVar()
            self.eDate = Entry(self.updateReservations, textvariable =  self.nE)
            self.eDate.grid(row=3, column = 4)

            Label(self.updateReservations, text="Dates Must Be Entered as: MMM D YYYY for Days < 10").grid(row=4, column =0, columnspan=6)
            Label(self.updateReservations, text="Dates Must Be Entered as: MMM DD YYYY for Days >= 10").grid(row=5, column =0, columnspan=6)

            Button(self.updateReservations, text="Search Availability", command=self.updateavailability).grid(row=6, column=2, columnspan=2)

        else:
            print("ResID not found under your name!")
            messagebox.showinfo("Error!", message="no reservation ID found under your account")
            return

            
    def updateavailability(self): #Just a start for you

            self.c = self.db.cursor()

            ### gets location on ResID
            sql= "SELECT Location FROM RESERVED_ROOMS WHERE ResID='{}'".format(self.r1.get())
            self.c.execute(sql)
            self.location = self.c.fetchone()[0] # string of Location
            print("self.location", self.location)

            ### room numbers on reservation
            sql = "SELECT RoomNo FROM RESERVED_ROOMS WHERE ResID='{}'".format(self.r1.get())
            self.c.execute(sql)
            
            self.rooms = []
            for rooms in self.c.fetchall():
                self.rooms.append(rooms[0])

            self.rooms = tuple(self.rooms)
                
            print("self.rooms", self.rooms, len(self.rooms))

            ### gets extra bed values
            if len(self.rooms) == 1:
                print("self.room length is 1")
                sql = "SELECT ExtraCost FROM RESERVED_ROOMS WHERE RoomNo = {}".format(self.rooms[0])
                self.c.execute(sql)
            else:
                print("self.room length more than 1")
                sql = "SELECT ExtraCost FROM RESERVED_ROOMS WHERE RoomNo in {}".format(self.rooms)
                self.c.execute(sql)

            self.extrabeds = []
            for beds in self.c.fetchall():
                self.extrabeds.append(beds[0])

            print("self.extrabeds", self.extrabeds)
            
            self.response1[1] # current start date
            self.response1[2] # current end date
            
            self.c = self.nS.get() # new start date
            self.d = self.nE.get() # new end date
            print("self.c", self.c, type(self.c))
            print("self.d", self.d, type(self.d))

            #convert to datetimes
            try:
                self.c = datetime.datetime.strptime(self.c, '%b %d %Y').date() # converts to datetime.date as in sql
                self.d = datetime.datetime.strptime(self.d, '%b %d %Y').date() # converts to datetime.date as in sql
            except:
                messagebox.showinfo("Search Error!", message="improper date format")
                return


            self.today1 = datetime.datetime.now().date()
            print("self.today1", self.today1)

            if self.c < self.today1 or self.d < self.today1: # no past dates
                print("past date date")
                messagebox.showinfo("Search Error!", message="cannot select dates in the past")
                return
            elif self.d < self.c: # cant end before starting
                print("end date before start date")
                messagebox.showinfo("Search Error!", message="make sure end date is not on or before start date")
                return
            else: # valid entries
                print("no problems with new date entries")
                print(self.username)
            
    def updateSearch(self, location, startdate, enddate):

            self.c = self.db.cursor() # places cursor in database

            # sql = "SELECT RoomNo, Location, Category, Capacity, Cost, ExtraCost FROM ROOMS WHERE Location = '{}' AND ROOMS.RoomNo NOT in ( SELECT RoomNo FROM RESERVED_ROOMS WHERE RESERVED_ROOMS.ResID in (SELECT ResID FROM RESERVATIONS WHERE (StartDate <= '{}' AND EndDate >= '{}') OR (StartDate <= '{}' AND EndDate >= '{}')) AND Location = '{}')".format(self.reserveCity, str(self.startdate1), str(self.startdate1), str(self.enddate1), str(self.enddate1), self.reserveCity)
            # print("correct sql", sql)
            
            # sql = "SELECT RoomNo, Category, Capacity, Cost, ExtraCost FROM ROOMS WHERE Location = '{}'".format(self.reserveCity)
            # self.c.execute(sql)
            # self.availablerooms = self.c.fetchall() # tuple of tuples of avaialble room info
            # print("\tself.availablerooms", self.availablerooms)

            self.RoomNumber = []
            self.RoomCategory = []
            self.RoomCapacity = []
            self.RoomCostDay = []
            self.RoomExtraCost = []
            # self.RoomChecks = []

            for room in self.availablerooms: # iterates through tuple
                self.RoomNumber.append(str(room[0])) # adds room number for each available room
                self.RoomCategory.append(room[1]) # adds category for each available room
                self.RoomCapacity.append(room[2]) # ^^ capactiy
                self.RoomCostDay.append(room[3]) # ^^ daily cost
                self.RoomExtraCost.append(room[4]) # ^^ extra bed cost

            # print("self.roomNumber", self.RoomNumber)

            if len(self.RoomNumber) == 0: 
                print("nothing available")
                return
            else:
                Label(self.reserve, text="Room Number").grid(row=0, column=0)
                Label(self.reserve, text="Room Category").grid(row=0, column=1)
                Label(self.reserve, text="# Persons Allowed").grid(row=0, column=2)
                Label(self.reserve, text="Cost per Day").grid(row=0, column=3)
                Label(self.reserve, text="Cost of Extra Bed Per Day").grid(row=0, column=4)
                Label(self.reserve, text="Select Room").grid(row=0, column=5)

            self.counter = 1 # keep the row numbers from overlapping through iteration
            j = 0 # specifc room index
            for room in self.RoomNumber: # iterates through all room numbes to create the GUI showing available rooms
            
                Label(self.reserve, text=str(room)).grid(row=self.counter, column=0) # Room Numbers
                Label(self.reserve, text=self.RoomCategory[j]).grid(row=self.counter, column=1)# Category
                Label(self.reserve, text=self.RoomCapacity[j]).grid(row=self.counter, column=2) # Capacity
                Label(self.reserve, text=self.RoomCostDay[j]).grid(row=self.counter, column=3) # Cost Per Day
                Label(self.reserve, text=self.RoomExtraCost[j]).grid(row=self.counter, column=4) # Cost Extra Ved
        
                self.counter += 1
                j += 1

            print("self.roomNumber", self.RoomNumber)
            
            self.cb = [] # list of all checkboxes
            self.cb_v = [] # list of all checkbox values 
            self.select = [] # list of all checkbox values after anything is checked/unchecked
            for ix, text in enumerate(self.RoomNumber):
                self.cb_v.append(StringVar())
                on_value = 1
                off_value = 0
                self.cb.append(Checkbutton(self.reserve, text=text, onvalue=on_value,
                                      offvalue=off_value, variable=self.cb_v[ix],
                                      command=self.chkbox_checked))
                self.cb[ix].grid(row=ix+1, column = 5)
                self.select.append(off_value)
                # print(self.select, "in enumarte")
                self.cb[-1].deselect()
                   
            self.b1 = Button(self.reserve, text="Check Details", command=self.checkDetails)
            self.b1.grid(row=self.counter, column=5)


        
    def cancelReservation(self):

        self.userview.withdraw()

        self.cancelReservation = Toplevel()
        self.cancelReservation.title("Cancel Reservation")

        Label(self.cancelReservation, text="Reservation ID").grid(row=1, column=0)
        self.cancel1 = StringVar()
        self.cancel = Entry(self.cancelReservation, textvariable = self.cancel1)
        self.cancel.grid(row=1, column = 1)

        Button(self.cancelReservation, text="Search", command=self.confirmCancel).grid(row=1, column= 2)
        Button(self.cancelReservation, text="Back", command=self.ReservationsToUserMenu).grid(row=1, column =3)

    def confirmCancel(self):

        self.c = self.db.cursor()
        sql = "SELECT ResID, StartDate, EndDate, C_Username FROM RESERVATIONS WHERE ResID = '{}' and C_Username = '{}'".format(self.cancel1.get(), self.username)
        print(sql)
        self.c.execute(sql)
        self.response1 = self.c.fetchone()
        print(self.response1)
        print("self.response1 type:", type(self.response1))
        #print("self.response1.rowcount", self.response1.rowcount)

        if self.response1 != None:
            print("reservation ID found")

            self.sv1 = StringVar()
            self.sv2 = StringVar()

            Label(self.cancelReservation, text="Start Date").grid(row=2, column=0)
            Label(self.cancelReservation, text="End Date").grid(row=2, column = 2)

            self.e10 = Entry(self.cancelReservation, textvariable = self.sv1)
            self.e10.grid(row=2, column=1)

            self.e11 = Entry(self.cancelReservation, textvariable = self.sv2)
            self.e11.grid(row=2, column=3)

            ### convert datetime from SQL to text box
            
            self.startdate = self.response1[1].strftime('%b %d %Y') # string of old start date MMM DD YYYY
            self.enddate = self.response1[2].strftime('%b %d %Y') # string of old end date date MMM DD YYYY

            self.sv1.set(self.startdate)
            self.sv2.set(self.enddate)

            self.sqlstart = self.response1[1].strftime('%Y-%m-%d') ## converts to YYYY-MM-DD
            self.sqlend = self.response1[2].strftime('%Y-%m-%d') ## converts to YYYY-MM-DD


            ## gets all room info
            sql = "SELECT RoomNo, Category, Capacity, Cost, ExtraCost FROM ROOMS WHERE ROOMS.RoomNo in (SELECT RoomNo FROM RESERVED_ROOMS WHERE RESERVED_ROOMS.ResID in ( SELECT ResID FROM RESERVATIONS WHERE (StartDate = '{}' AND EndDate = '{}') ) )".format(self.sqlstart, self.sqlend)
            # print(sql)

            self.c.execute(sql)

            self.cancelroominfo = []
            for room in self.c.fetchall():
                self.cancelroominfo.append(room)

            print("self.cancelroominfo", self.cancelroominfo)

            Label(self.cancelReservation, text="Room Number").grid(row=3, column=0)
            Label(self.cancelReservation, text="Room Category").grid(row=3, column=1)
            Label(self.cancelReservation, text="# Persons Allowed").grid(row=3, column=2)
            Label(self.cancelReservation, text="Cost per Day").grid(row=3, column=3)
            Label(self.cancelReservation, text="Cost of Extra Bed Per Day").grid(row=3, column=4)
            Label(self.cancelReservation, text="Select Extra Bed").grid(row=3, column=5)

            counter = 4
            for room in self.cancelroominfo:
                Label(self.cancelReservation, text=str(room[0])).grid(row = counter, column = 0)
                Label(self.cancelReservation, text=room[1]).grid(row = counter, column = 1)
                Label(self.cancelReservation, text=room[2]).grid(row = counter, column = 2)
                Label(self.cancelReservation, text=str(room[3])).grid(row = counter, column = 3)
                Label(self.cancelReservation, text=str(room[4])).grid(row = counter, column = 4)
                # Label(self.cancelReservation, text=str(room[5])).grid(row = counter, column = 5)

                counter += 1

            ## gets booleans
            sql = "SELECT ExtraCost FROM RESERVED_ROOMS WHERE ResID =  '{}'".format(self.cancel1.get())
            print(sql)

            self.c.execute(sql)

            self.cancelbed = []
            for room in self.c.fetchall():
                self.cancelbed.append(room)

            print("self.cancelbeds", self.cancelbed)

            counter = 4
            for bed in self.cancelbed:
                if bed[0] == 1:
                    Label(self.cancelReservation, text="No").grid(row = counter, column = 5)
                else:
                    Label(self.cancelReservation, text="Yes").grid(row = counter, column = 4)
                    
                counter +=1

            ## gets reservation cost
            sql = "SELECT FinalCost FROM RESERVATIONS WHERE ResID = '{}'".format(self.cancel1.get())
            print(sql)
            self.c.execute(sql)

            self.cancelcost = self.c.fetchall()[0]
            print("self.cancelcost", self.cancelcost)

            ## Date of Cancellation
            self.today1 = datetime.datetime.now().date()
            print("self.today1", self.today1, type(self.today1))

            ## Amount to be refunded:
            datediff = (self.response1[1] - self.today1).days

            if datediff <= 1:
                self.refund = 0
                
            elif datediff >1 and datediff <=3:
                self.refund = self.cancelcost[0] * .8
                
            elif datefidd > 3:
                self.reund = self.cancelcost[0]

            Label(self.cancelReservation, text="Total Cost of Reservation").grid(row = counter, column = 0)
            Label(self.cancelReservation, text="Date of Cancellation").grid(row = counter + 1, column = 0)
            Label(self.cancelReservation, text="Refund Amount").grid(row = counter + 2, column = 0)

            Label(self.cancelReservation, text="$ "+str(self.cancelcost[0])).grid(row = counter, column = 1)
            Label(self.cancelReservation, text=str(self.today1)).grid(row = counter + 1, column = 1)
            Label(self.cancelReservation, text="$ "+str(self.refund)).grid(row = counter + 2, column = 1)

            Button(self.cancelReservation, text="Cancel", command=self.canceldis).grid(row = counter + 3, column = 0, columnspan = 5)

        else:
            print("ResID not found under your name!")
            messagebox.showinfo("Error!", message="no reservation ID found under your account")
            return

    def canceldis(self):

        sql = "UPDATE RESERVATIONS SET Cancelled = '1' WHERE ResID='{}'".format(self.cancel1.get())
        print(sql)
        self.c.execute(sql)
        self.db.commit()
            
        

        # self.c = self.db.cursor()

        # SELECT 
        
        # self.c.execute(sql)
        # self.response1 = self.c.fetchone()
        # print(self.response1)
            

        
# required to start application
root = Tk() # creates the first window
prog = FancyHotels(root) # starts the class of functions
root.mainloop() # keeps program infinitely running until destroyed
